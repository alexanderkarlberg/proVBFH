      SUBROUTINE SQQ_QQQQH_NC(PBAR,FSIGN,FLAV,PH,ANS)
c     Last modified on 1 sept 2008
c     ANS(0) equal to ANS(1) + ANS(2)
c     ANS(1), ANS(2) are color flow matrix elements squareds
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C AND HELICITIES
C FOR THE POINT IN PHASE SPACE P(0:3,NEXTERNAL)
C  
C FOR PROCESS : u s -> u s b~ b h  
C  
C Crossing   1 is u s -> u s b~ b h  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      include 'genpsr.inc'
      INTEGER                 NCOMB,     NCROSS         
      PARAMETER (             NCOMB=  64, NCROSS=  1)
      INTEGER    THEL
      PARAMETER (THEL=NCOMB*NCROSS)
      integer nexternal 
      parameter(nexternal = 7)
C  
C ARGUMENTS 
C  
c      REAL*8 P1(0:3,NEXTERNAL),ANS(NCROSS)
      real*8 ans(0:2)           !0 is the sum and 1 and 2 are color flows
      real*8 pbar(0:3,6),ph(0:3)
      integer fsign(6)
      integer flav(6)           !1 is up(c,t) and 2 is dn(s,b)
C  
C LOCAL VARIABLES 
C  
      INTEGER NHEL(NEXTERNAL,NCOMB),NTRY
      REAL*8 T(0:2)
      INTEGER IHEL,IDEN(NCROSS),IC(NEXTERNAL,NCROSS)
      INTEGER IPROC,JC(NEXTERNAL), I, ICOL
      LOGICAL GOODHEL(NCOMB,NCROSS)
      INTEGER NGRAPHS
      REAL*8 hwgt, xtot, xtry, xrej, xr, yfrac(0:ncomb)
      INTEGER idum, ngood, igood(ncomb), jhel, j
      LOGICAL warned
      REAL     xran1
      EXTERNAL xran1
C  
C GLOBAL VARIABLES
C       
      character*79         hel_buff
      common/to_helicity/  hel_buff

      integer isum_hel
      
      DATA NTRY,IDUM /0,-1/
      DATA xtry, xrej, ngood /0,0,0/
      DATA warned, isum_hel/.false.,0/
      SAVE yfrac, igood, IDUM, jhel
      DATA NGRAPHS /   12/                    
      DATA GOODHEL/THEL*.FALSE./
      DATA (NHEL(IHEL,   1),IHEL=1,7) /-1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,   2),IHEL=1,7) /-1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,   3),IHEL=1,7) /-1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,   4),IHEL=1,7) /-1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,   5),IHEL=1,7) /-1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,   6),IHEL=1,7) /-1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,   7),IHEL=1,7) /-1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,   8),IHEL=1,7) /-1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,   9),IHEL=1,7) /-1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  10),IHEL=1,7) /-1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  11),IHEL=1,7) /-1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  12),IHEL=1,7) /-1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  13),IHEL=1,7) /-1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  14),IHEL=1,7) /-1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  15),IHEL=1,7) /-1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  16),IHEL=1,7) /-1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  17),IHEL=1,7) /-1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  18),IHEL=1,7) /-1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  19),IHEL=1,7) /-1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  20),IHEL=1,7) /-1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  21),IHEL=1,7) /-1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  22),IHEL=1,7) /-1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  23),IHEL=1,7) /-1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  24),IHEL=1,7) /-1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  25),IHEL=1,7) /-1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  26),IHEL=1,7) /-1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  27),IHEL=1,7) /-1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  28),IHEL=1,7) /-1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  29),IHEL=1,7) /-1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  30),IHEL=1,7) /-1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  31),IHEL=1,7) /-1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  32),IHEL=1,7) /-1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  33),IHEL=1,7) / 1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  34),IHEL=1,7) / 1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  35),IHEL=1,7) / 1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  36),IHEL=1,7) / 1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  37),IHEL=1,7) / 1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  38),IHEL=1,7) / 1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  39),IHEL=1,7) / 1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  40),IHEL=1,7) / 1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  41),IHEL=1,7) / 1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  42),IHEL=1,7) / 1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  43),IHEL=1,7) / 1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  44),IHEL=1,7) / 1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  45),IHEL=1,7) / 1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  46),IHEL=1,7) / 1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  47),IHEL=1,7) / 1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  48),IHEL=1,7) / 1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  49),IHEL=1,7) / 1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  50),IHEL=1,7) / 1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  51),IHEL=1,7) / 1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  52),IHEL=1,7) / 1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  53),IHEL=1,7) / 1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  54),IHEL=1,7) / 1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  55),IHEL=1,7) / 1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  56),IHEL=1,7) / 1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  57),IHEL=1,7) / 1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  58),IHEL=1,7) / 1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  59),IHEL=1,7) / 1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  60),IHEL=1,7) / 1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  61),IHEL=1,7) / 1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  62),IHEL=1,7) / 1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  63),IHEL=1,7) / 1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  64),IHEL=1,7) / 1, 1, 1, 1, 1, 1,-1/
      DATA (IDEN(IHEL),IHEL=  1,  1) /  36/
C ----------
C BEGIN CODE
C ----------
      NTRY=NTRY+1
      IPROC=1

      DO ICOL=0,2
         ANS(ICOL) = 0D0
      ENDDO
      IF (ISUM_HEL .EQ. 0 .OR. NTRY .LT. 10) THEN
         DO IHEL=1,NCOMB
            IF (GOODHEL(IHEL,IPROC) .OR. NTRY .LT. 2) THEN
               call QQ_QQQQH_NC(pbar,fsign,flav,ph,nhel(1,ihel),T)
               do ICOL = 0,2
                  ANS(ICOL) = ANS(ICOL) + T(ICOL)
               enddo
               IF (T(0) .GT. 0D0 .AND. .NOT. GOODHEL(IHEL,IPROC)) THEN
                      GOODHEL(IHEL,IPROC)=.TRUE.
                      NGOOD = NGOOD +1
                      IGOOD(NGOOD) = IHEL
                   ENDIF
                ENDIF
           ENDDO
           JHEL = 1
           ISUM_HEL=MIN(ISUM_HEL,NGOOD)
        ELSE                    !RANDOM HELICITY
           DO J=1,ISUM_HEL
              JHEL=JHEL+1
              IF (JHEL .GT. NGOOD) JHEL=1
              HWGT = REAL(NGOOD)/REAL(ISUM_HEL)
              IHEL = IGOOD(JHEL)
              call QQ_QQQQH_NC(pbar,fsign,flav,ph,nhel(1,ihel),T)
              do ICOL=0,2
                 ANS(ICOL)=ANS(ICOL)+T(ICOL)*HWGT
              enddo
           ENDDO
        ENDIF
c     spin and color sum is returned
c      ANS(IPROC)=ANS(IPROC)/DBLE(IDEN(IPROC))
      END
       
       
      subroutine QQ_QQQQH_NC(PBAR,FSIGN,FLAV,PH,NHEL,MATRIX)
C  
C Generated by MadGraph II Version 3.0. Updated 02/19/04                
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : u s -> u s b~ b h  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS,    NEIGEN
      PARAMETER (NGRAPHS=  12,NEIGEN=  3) 
c      include "genpsr.inc"
      INTEGER    NWAVEFUNCS     , NCOLOR
      PARAMETER (NWAVEFUNCS=  32, NCOLOR=   3)
      integer nexternal 
      parameter(nexternal = 7)
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
c      REAL*8 P(0:3,NEXTERNAL)
      real*8 pbar(0:3,6),ph(0:3)
      real*8 MATRIX(0:2)
      INTEGER NHEL(NEXTERNAL)
      integer fsign(6)
      integer flav(6)
C     
C  
C LOCAL VARIABLES 
C  
      INTEGER I,J
      COMPLEX*16 ZTEMP
      REAL*8 DENOM(NCOLOR), CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NGRAPHS), JAMP(NCOLOR)
      COMPLEX*16 W(6,NWAVEFUNCS),WX1(6),WX2(6)
c     local coupling parameters
      complex*16 gzf1(2),gzf3(2),gzf5(2)
      real * 8 tfac(ncolor)
C  
C GLOBAL VARIABLES
C  
      include 'coupl.inc'
      include 'global_col.inc'
      include 'nlegborn.h'
      include 'pwhg_flst.h' 
      include 'pwhg_flst_2.h' 
      integer tag_factor
      common/cdoubletag/tag_factor

      integer tags(nlegreal)
      include 'tags.h' 
C      integer :: iqpairtag = 10
C  
C COLOR DATA
C  
      DATA Denom(1)/1/                                       
      DATA (CF(i,1),i=1,3)/ 6,0,0/            
c     T[4,2]T[6,1]T[3,5] 
c     
      DATA Denom(2)/1/                                       
      DATA (CF(i,2),i=1,3  )/0,6,0/                      
C               T[3,1]T[6,2]T[4,5]  
c     
      DATA Denom(3)/1/                                       
      DATA (CF(i,3),i=1,3  )/0,0,6/  

c
c     Couplings
      if(flav(5).eq.1) then     !up-type
         do i=1,2
            gzf5(i)=gzu(i)
         enddo
      elseif(flav(5).eq.2) then !dn-type
          do i=1,2
            gzf5(i)=gzd(i)
         enddo
      else 
         stop
      endif
c
      if(flav(1).eq.1) then     !up-type
         do i=1,2
            gzf1(i)=gzu(i)
         enddo
      elseif(flav(1).eq.2) then!dn-type
          do i=1,2
            gzf1(i)=gzd(i)
         enddo
      else 
         stop
      endif
c
      if(flav(3).eq.1) then     !up-type
         do i=1,2
            gzf3(i)=gzu(i)
         enddo
      elseif(flav(3).eq.2) then!dn-type
          do i=1,2
            gzf3(i)=gzd(i)
         enddo
      else 
         stop
      endif   
C ----------
C BEGIN CODE
C ----------
c
      tfac=1d0
c      JAMP(   1) = -AMP(   1)-AMP(   5)-AMP(  10)-AMP(  11) !uncrossed: gluon upper quarkline
c      JAMP(   2) = -AMP(   2)-AMP(   4)-AMP(   6)-AMP(   8) !no vbf structure
c      JAMP(   3) = -AMP(   3)-AMP(   7)-AMP(   9)-AMP(  12) !gloun lower line

      if (realequiv_tag * alr_tag > 0) then 
         stop 'mg_qqqqqqh_nc: both positive' 
      endif

      if (realequiv_tag > 0) then 
         tags = flst_realtags(:,realequiv_tag)
      elseif (alr_tag > 0) then 
         tags = flst_alrtags(:,alr_tag)
      endif

C     kill amplitudes where gluons are connected to wrong fermion lines 
C     (based on comments above about colour structure of the amplitudes) 
      if (any(tags(1:2) == iqpairtag*tag_factor) .or. any(tags(4:7) == iqpairtag*tag_factor)) then 
C     running without fulltags, so do nothing here 

      elseif (sum(tags(1:nlegreal)) == 8+2*iqpairtag*tag_factor) then ! case 1 2 -> 1 2 1 1 or permutations of it 
         tfac(3) = 0d0 
      elseif (sum(tags(1:nlegreal)) == 10+2*iqpairtag*tag_factor) then ! case 1 2 -> 1 2 2 2 or permutations of it 
         tfac(1) = 0d0 
      else
         write(*,*) 'tags', tags 
         write(*,*) 'iqpairtag, tag_factor',iqpairtag, tag_factor
         stop 'mg_qqqqqqh_nc: invalid tags'
      endif

C FOR PROCESS : u s -> u s b~ b h  
      CALL IXXXXX(PBAR(0,1),ZERO ,NHEL(1)*FSIGN(1),FSIGN(1),W(1,1))        
      CALL IXXXXX(PBAR(0,3),ZERO ,NHEL(3)*FSIGN(3),FSIGN(3),W(1,2))        
      CALL OXXXXX(PBAR(0,2),ZERO ,NHEL(2)*FSIGN(2),FSIGN(2),W(1,3))        
      CALL OXXXXX(PBAR(0,4),ZERO ,NHEL(4)*FSIGN(4),FSIGN(4),W(1,4))        
      CALL IXXXXX(PBAR(0,5),ZERO ,NHEL(5)*FSIGN(5),FSIGN(5),W(1,5))       
      CALL OXXXXX(PBAR(0,6),ZERO ,NHEL(6)*FSIGN(6),FSIGN(6),W(1,6))       
      CALL SXXXXX(PH,+1,W(1,7))

      CALL JIOXXX(W(1,5   ),W(1,6   ),GG ,ZERO    ,ZERO    ,W(1,9   ))     
      if(tfac(1).ne.0) then
         CALL JIOXXX(W(1,2   ),W(1,4   ),GZF3 ,ZMASS   ,ZWIDTH  ,W(1,8   ))    
         CALL JVSXXX(W(1,8   ),W(1,7   ),GZZH ,ZMASS   ,ZWIDTH  ,W(1,         
     &        10  ))                                                          
         CALL FVOXXX(W(1,3   ),W(1,10  ),GZF1 ,ZERO    ,ZERO    ,W(1,11  ))    
         CALL IOVXXX(W(1,1   ),W(1,11  ),W(1,9   ),GG ,AMP(1   ))             
      endif

      CALL JIOXXX(W(1,2   ),W(1,4   ),GG ,ZERO    ,ZERO    ,W(1,12  ))     
      if(tfac(2).ne.0) then
          CALL JIOXXX(W(1,5   ),W(1,6   ),GZF5 ,ZMASS   ,ZWIDTH  ,W(1,13  ))    
         CALL JVSXXX(W(1,13  ),W(1,7   ),GZZH ,ZMASS   ,ZWIDTH  ,W(1,         
     &        14  ))                                                          
         CALL FVOXXX(W(1,3   ),W(1,12  ),GG ,ZERO    ,ZERO    ,W(1,15  ))     
         CALL IOVXXX(W(1,1   ),W(1,15  ),W(1,14  ),GZF1 ,AMP(2   ))            
      endif
      
      if(tfac(3).ne.0) then
         CALL JIOXXX(W(1,1   ),W(1,3   ),GZF1 ,ZMASS   ,ZWIDTH  ,W(1,16  ))    
         CALL JVSXXX(W(1,16  ),W(1,7   ),GZZH ,ZMASS   ,ZWIDTH  ,W(1,         
     &        17  ))                                                          
         CALL FVOXXX(W(1,4   ),W(1,17  ),GZF3 ,ZERO    ,ZERO    ,W(1,18  ))    
         CALL IOVXXX(W(1,2   ),W(1,18  ),W(1,9   ),GG ,AMP(3   ))             
      endif
      
      CALL JIOXXX(W(1,1   ),W(1,3   ),GG ,ZERO    ,ZERO    ,W(1,19  ))     
      if(tfac(2).ne.0) then
         CALL FVOXXX(W(1,4   ),W(1,19  ),GG ,ZERO    ,ZERO    ,W(1,20  ))     
         CALL JIOXXX(W(1,2   ),W(1,20  ),GZF3 ,ZMASS   ,ZWIDTH  ,W(1,21  ))    
         CALL VVSXXX(W(1,13  ),W(1,21  ),W(1,7   ),GZZH ,AMP(4   ))           
      endif
      
      if(tfac(1).ne.0) then
         CALL FVIXXX(W(1,1   ),W(1,10  ),GZF1 ,ZERO    ,ZERO    ,W(1,22  ))    
         CALL IOVXXX(W(1,22  ),W(1,3   ),W(1,9   ),GG ,AMP(5   ))             
      endif
      
      if(tfac(2).ne.0) then
         CALL FVIXXX(W(1,1   ),W(1,12  ),GG ,ZERO    ,ZERO    ,W(1,23  ))     
         CALL IOVXXX(W(1,23  ),W(1,3   ),W(1,14  ),GZF1 ,AMP(6   ))            
      endif
      
      if(tfac(3).ne.0) then
         CALL FVIXXX(W(1,2   ),W(1,17  ),GZF3 ,ZERO,ZERO,W(1,24  ))    
         CALL IOVXXX(W(1,24  ),W(1,4   ),W(1,9   ),GG ,AMP(7   ))             
      endif
      
      if(tfac(2).ne.0) then
         CALL FVIXXX(W(1,2   ),W(1,19  ),GG ,ZERO    ,ZERO    ,W(1,25  ))     
         CALL JIOXXX(W(1,25  ),W(1,4   ),GZF3 ,ZMASS   ,ZWIDTH  ,W(1,26  ))    
         CALL VVSXXX(W(1,13  ),W(1,26  ),W(1,7   ),GZZH ,AMP(8   ))           
      endif
      
      if(tfac(3).ne.0) then
         CALL FVOXXX(W(1,6   ),W(1,12  ),GG ,ZERO,ZERO    ,W(1,27  ))     
         CALL IOVXXX(W(1,5   ),W(1,27  ),W(1,17  ),GZF5 ,AMP(9   ))            
      endif
      
      if(tfac(1).ne.0) then
         CALL FVIXXX(W(1,5   ),W(1,19  ),GG ,ZERO   ,ZERO    ,W(1,28  ))     
         CALL JIOXXX(W(1,28  ),W(1,6   ),GZF5 ,ZMASS   ,ZWIDTH  ,W(1,29  ))    
         CALL VVSXXX(W(1,29  ),W(1,8   ),W(1,7   ),GZZH ,AMP(10  ))           
      endif
      
      if(tfac(1).ne.0) then
         CALL FVOXXX(W(1,6   ),W(1,19  ),GG ,ZERO   ,ZERO    ,W(1,30  ))     
         CALL IOVXXX(W(1,5   ),W(1,30  ),W(1,10  ),GZF5 ,AMP(11  ))            
      endif
      
      if(tfac(3).ne.0) then
         CALL FVIXXX(W(1,5   ),W(1,12  ),GG ,ZERO ,ZERO  ,W(1,31  ))     
         CALL JIOXXX(W(1,31  ),W(1,6   ),GZF5 ,ZMASS ,ZWIDTH  ,W(1,32  ))    
         CALL VVSXXX(W(1,32  ),W(1,16  ),W(1,7   ),GZZH ,AMP(12  ))           
      endif
      
      JAMP(   1) = -AMP(   1)-AMP(   5)-AMP(  10)-AMP(  11) !uncrossed: gluon upper quarkline
      JAMP(   2) = -AMP(   2)-AMP(   4)-AMP(   6)-AMP(   8) !no vbf structure
      JAMP(   3) = -AMP(   3)-AMP(   7)-AMP(   9)-AMP(  12) !gloun lower line

      if (realequiv_tag * alr_tag > 0) then 
         stop 'mg_qqqqqqh_nc: both positive' 
      endif

      if (realequiv_tag > 0) then 
         tags = flst_realtags(:,realequiv_tag)
      elseif (alr_tag > 0) then 
         tags = flst_alrtags(:,alr_tag)
      endif

C     kill amplitudes where gluons are connected to wrong fermion lines 
C     (based on comments above about colour structure of the amplitudes) 
      if (any(tags(1:2) == iqpairtag*tag_factor) .or. any(tags(4:7) == iqpairtag*tag_factor)) then 
C     running without fulltags, so do nothing here 

      elseif (sum(tags(1:nlegreal)) == 8+2*iqpairtag*tag_factor) then ! case 1 2 -> 1 2 1 1 or permutations of it 
         JAMP(3) = 0d0 
      elseif (sum(tags(1:nlegreal)) == 10+2*iqpairtag*tag_factor) then ! case 1 2 -> 1 2 2 2 or permutations of it 
         JAMP(1) = 0d0 
      else
         write(*,*) 'tags', tags 
         stop 'mg_qqqqqqh_nc: invalid tags'
      endif


c     get color factors 
      do i = 1,ncolor
         do j =1,ncolor
            cf(i,j) =0.0d0
         enddo
      enddo
c
cc     
c 
c BJ: probaly have to fix this for crossed processes:
      cf(1,1) = 6.0d0
      cf(2,2) = cf(1,1)      
      cf(3,3) = cf(1,1)
c FS: uncrossed:col_del= 2, pair71 col_del=3, pair 72 col_del=1
      cf(col_del,col_del)=0d0
      jamp(col_del)=0d0
 
c
ccccccccccccccccccccccccccc
c
      matrix(0) = 0.0D0 
      DO I = 1, NCOLOR
          ZTEMP = (0.D0,0.D0)
          DO J = 1, NCOLOR
              ZTEMP = ZTEMP + CF(J,I)*JAMP(J)
          ENDDO
          matrix(0) = matrix(0) + ZTEMP*DCONJG(JAMP(I))/DENOM(I)   
      ENDDO
 
      DO I = 1,2
         matrix(I) = CF(I,I)/DENOM(I) * 
     $        (DBLE(JAMP(I))**2 + DIMAG(JAMP(I))**2)
      ENDDO

c
C      CALL GAUGECHECK(JAMP,ZTEMP,EIGEN_VEC,EIGEN_VAL,NCOLOR,NEIGEN) 
      END
