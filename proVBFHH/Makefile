#############################################################################
# 									    #
# Makefile to compile and link FORTRAN programs                             #
#  									    #
# "make" compiles and links the specified main programs and modules,        #
# using the specified libraries (if any), and produces the executables      #
#									    #
# "make clean" removes all files generated by "make", except the excutable  #
# "make distclean" removes all files generated by "make"                    #
#                                                                           #
#############################################################################

include Makefile.inc

########### changes below should normally not be needed ###############

# libraries
# these commands are meant to produce a uniform output of the form
# -Wl,-rpath,<path-to-library> -L<path-to-library> -llibrary
# independently of the output returned by the individual configuration scripts
LHAPDFLIBS=-Wl,-rpath,$(shell $(LHEXEC) --prefix)/lib -L$(shell $(LHEXEC) --prefix)/lib -lLHAPDF
FASTJETLIBS=$(shell $(FJEXEC) --libs --plugins)
HOPPETLIBS=-Wl,-rpath,$(shell $(HPEXEC) --prefix)/lib $(shell $(HPEXEC) --libs)
#CHAPLINLIBS= -lchaplin
LIBS=$(LHAPDFLIBS) $(HOPPETLIBS) $(FASTJETLIBS) $(CHAPLINLIBS)

# compilers
ifeq ("$(COMPILER)","gfortran")	
  # fortran and f90 compiler
  FC = gfortran
  # debugging with gfortran
  FFLAGS = -O3 -fno-automatic -ffixed-line-length-132 -std=legacy
#  FFLAGS += -g -ffpe-trap=invalid,zero,overflow
#  FFLAGS = -fno-automatic -ffixed-line-length-none -m32 -cpp   -O3

  # c++ compiler
  CXX = g++
  #CXX = c++
  CXXFLAGS = -O3
  CXXFLAGS += $(shell $(FJEXEC) --cxxflags)
  ifeq ($(shell uname), Darwin)
    CXXLIBS= -lc++
  else
    CXXLIBS= -lstdc++ #with g++
  endif	
  ifeq ($(CXX), c++)
    CXXFLAGS += -m32
  endif
endif

ifeq ("$(COMPILER)","ifort")
  FC = ifort -save  -extend_source
  CXX = icpc
  CXXFLAGS = -O3
  CXXFLAGS += $(shell $(FJEXEC) --cxxflags)
  ifeq ($(shell uname), Darwin)
    CXXLIBS= -lc++
  else
    CXXLIBS= -lstdc++ #with g++
  endif	
  LIBS += -limf 
  FFLAGS =  -O3 -extend_source 
  ## For floating point exception trapping  uncomment the following 
  #FFLAGS += -fpe0
  #OPT = -O3 -p
  ## For debugging uncomment the following
#  FFLAGS += -debug -g
endif

F90FLAGS = $(FFLAGS) $(shell $(HPEXEC) --fflags)

## For static linking uncomment the following
#STATIC= -static

## PDFs should be taken from LHAPDF;
## LHAPDF package has to be installed separately
PDF=lhapdf
PDFPACK=lhapdfif.o

#PWD=$(shell pwd)
OBJ=obj-$(COMPILER)
ANALYSIS=analysis
SRC=src
AUX=aux
INCLUSIVE=$(SRC)/inclusive
EXCLUSIVE=$(SRC)/exclusive
PWGPATH=$(SRC)/powheg-files
VBFHJJJ=$(PWGPATH)/hjjj-files


# includes
INCLUDE= -I$(SRC) -I$(INCLUSIVE) -I$(EXCLUSIVE) -I$(PWGPATH) -I$(PWGPATH)/include 
INCLUDE+= -I$(ANALYSIS) -I$(VBFHJJJ) -I$(VBFHJJJ)/vbfnlo-files 
ifeq ("$(COMPILER)","gfortran")	
INCLUDE+= -J$(OBJ)
endif
ifeq ("$(COMPILER)","ifort")	
INCLUDE+= -module $(OBJ)
endif
# vpath
VPATH= ./:$(SRC)/:$(EXCLUSIVE)/:$(INCLUSIVE)/:$(PWGPATH)/:$(EXCLUSIVE)/vbfnlo-files/
VPATH+=:$(ANALYSIS)/:$(VBFHJJJ)/:$(VBFHJJJ)/dhelas:$(VBFHJJJ)/vbfnlo-files/:$(OBJ)/

# analysis files
ANALYSIS_FILE=user_analysis.o phspcuts.o
#ANALYSIS_FILE=heat_map.o phspcuts.o
#ANALYSIS_FILE=ew_analysis.o phspcuts.o
#ANALYSIS_FILE=eq33-approx.o phspcuts.o
#ANALYSIS_FILE=small-qt.o phspcuts.o
#ANALYSIS_FILE=unitarity_analysis.o phspcuts.o
#ANALYSIS_FILE=accum_analysis.o phspcuts.o
#ANALYSIS_FILE=ptjsrtsrwgt_analysis.o phspcuts.o
#ANALYSIS_FILE=highpt-analysis.o phspcuts.o

PWHGANAL= fastjetfortran.o pwhg_bookhist-multi.o \
	  pwhg_analysis.o pwhg_analysis_driver.o 


HJJJ= init_phys.o virtual.o calc_als.o vbfnloinput.o 

HELAS=ixxxxx.o oxxxxx.o fvixxx.o fvoxxx.o jvvxxx.o vvvxxx.o  \
      jioxxx.o iovxxx.o hvvxxx.o jvsxxx.o  w3w3xx.o wwwwxx.o \
      vvsxxx.o vxxxxx.o jwwwxx.o jw3wxx.o hioxxx.o fsixxx.o  \
      fsoxxx.o sxxxxx.o vcartx.o sssxxx.o vvssxx.o

VBFNLO= brakets_new.o coeff.o dotproducts.o flavorsum.o \
	hjjj_amp_aux_corrected.o dilog.o HtoWW.o kinematics_aux.o loops_aux.o \
	parameters.o qqhqqj-born.o qqhqqj-virt.o \
	qqh2q2g_me_new.o qqh4q_me_new.o tohh.o
#mg_qqqqggh_cc.o mg_qqqqggh_nc.o mg_qqqqqqh_cc.o mg_qqqqqqh_nc.o qqhqqjj.o qqhqqQQ.o\

PWHG=   lhefwrite.o LesHouches.o LesHouchesreg.o gen_Born_phsp.o \
        test_Sudakov.o pt2maxreg.o Bornzerodamp.o gen_real_phsp.o \
        find_regions.o checkmomzero.o sigborn.o sigremnants.o \
	gen_radiation.o gen_index.o powheginput.o validflav.o \
	boostrot.o bra_ket_subroutines.o cernroutines.o maxrat.o \
	random.o pdfcalls.o reshufflemoms.o newunit.o  mint_upb.o \
	mwarn.o sigsoftvirt.o sigvirtual.o integrator.o opencount.o \
	pwhgreweight.o ubprojections.o setlocalscales.o \
	$(PDFPACK) $(HJJJ) $(HELAS)  $(VBFNLO) 

INCL=  	proVBFHH.o incl_vbfhh.o phase_space.o matrix_element.o \
	incl_parameters.o integration.o io_utils.o lcl_dec.o \
	tensor.o ME_expressions.o nonfact.o nonfact_expressions.o \
	helper.o constants.o

EXCL=	excl_vbfhh.o pwhg_init.o bbinit.o btilde.o incl2pwhg.o \
	Born_phsp.o Born.o init_couplings.o init_processes.o \
	convert_coup.o real_vbfnlo.o  compreal_hqqqq_new.o lightcone.o \
	setstrongcoupl.o sigreal.o sigcollremn.o sigcollsoft.o \
	phi3m.o boost.o $(PWHGANAL)

# all object files (except analysis)
OBJS = $(INCL) $(EXCL) $(PWHG) 

all: proVBFHH combine_runs

proVBFHH: $(OBJS) $(ANALYSIS_FILE) Makefile
	$(FC) $(FFLAGS) $(STATIC) $(patsubst %,$(OBJ)/%,$(OBJS)) \
	$(patsubst %,$(OBJ)/%,$(ANALYSIS_FILE)) $(LIBS) $(CXXLIBS) -o $@

combine_runs: 
	$(FC) $(FFLAGS) -mcmodel=large -o $(AUX)/$@ $(AUX)/combine_runs.f

# rules to compile source programs
%.o: %.f Makefile
	$(FC) $(FFLAGS) $(INCLUDE) -c -o $(OBJ)/$@ $< 

%.o: %.F Makefile
	$(FC) $(FFLAGS) $(INCLUDE) -o $(OBJ)/$@ $< -c 

%.o: %.f90 Makefile
	$(FC) $(F90FLAGS) $(INCLUDE) -o $(OBJ)/$@ $< -c

%.o: %.cc Makefile
	$(CXX) $(CXXFLAGS) $(INCLUDE) -c -o $(OBJ)/$@ $<

# f90 module dependencies
proVBFHH.o: incl_vbfhh.o
phase_space.o: matrix_element.o incl_parameters.o
excl_vbfhh.o: incl_parameters.o
incl_vbfhh.o: matrix_element.o incl_parameters.o phase_space.o integration.o io_utils.o lcl_dec.o
incl_parameters.o: integration.o
incl2pwhg.o: matrix_element.o
matrix_element.o: incl_parameters.o tensor.o tohh.o ME_expressions.o nonfact.o
nonfact.o : helper.o constants.o nonfact_expressions.o incl_parameters.o

clean:
	rm -f $(OBJ)/*.o $(OBJ)/*~ $(OBJ)/*.mod

distclean: clean
	rm -f proVBFHH $(AUX)/combine_runs $(OBJ)/*.mod
